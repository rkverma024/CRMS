@model CRMS.Core.ViewModel.TicketViewModel

@{
    ViewBag.Title = "Create";
}

@if (@TempData["Already"] != null)
{<div class="alert alert-danger">
        <span class="glyphicon glyphicon-remove-circle"></span>
        @TempData["Already"]
    </div>}

<html>
<head>
    <title></title>
</head>
<body>
    <div class="section">
        <div class="container" style="background-color:#efefef">
            @using (Html.BeginForm("Edit", "Ticket", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                
                @Html.ValidationSummary(true, "", new { @class = "errorMsg" })
                <div class="formDiv">
                    <div class="topTitleHead pb20">
                        <h2>Edit Ticket</h2>
                    </div>
                    <div class="formSection">
                        <div class="inputBox">
                            <label>Title</label>
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            @*<p class="errorMsg">This field is required</p>*@
                        </div>
                        <div class="inputBox selectBox">
                            <label>Assign</label>
                            @Html.DropDownListFor(model => model.AssignTo, new SelectList(Model.DropdownAssignTo, "Id", "Name"),
            "Select Employee", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.AssignTo, "", new { @class = "text-danger" })
                            @*<p class="errorMsg">This field is required</p>*@
                        </div>
                        <div class="inputBox selectBox">
                            <label>Type</label>
                            @Html.DropDownListFor(model => model.TypeId, new SelectList(Model.DropdownTypeId, "Id", "Name"),
            "Select Type", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
                            @*<p class="errorMsg">This field is required</p>*@
                        </div>
                        <div class="inputBox selectBox">
                            <label>Priority</label>
                            @Html.DropDownListFor(model => model.PriorityId, new SelectList(Model.DropdownPriorityId, "Id", "Name"),
           "Select Priority", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PriorityId, "", new { @class = "text-danger" })
                            @*<p class="errorMsg">This field is required</p>*@
                        </div>
                        <div class="inputBox selectBox">
                            <label>Status</label>
                            @Html.DropDownListFor(model => model.StatusId, new SelectList(Model.DropdownStatusId, "Id", "Name"),
            "Select Status", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                            @*<p class="errorMsg">This field is required</p>*@
                        </div>
                        <div class="inputBox">
                            <label>Description</label>
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            @*<p class="errorMsg">This field is required</p>*@
                        </div>
                        <div class="inputBox">
                            <label>Image</label>
                            @*</div>
                                <div class="col-md-8">*@
                            @Html.TextBoxFor(model => model.Image, new { type = "file", @class = "form-control" })
                        </div>
                        <div class="inputBox">
                            <label>Available Images</label>
                            <table>
                                @foreach (var item in Model.TicketImage)
                                {
                                    <tr>
                                        <td>
                                            <li>
                                                @* @Html.ActionLink(item.FileName, "DownloadImg", new { id = item.Id }) ||*@
                                                @Html.DisplayFor(modelItem => item.FileName)|
                                                <a href="@Url.Action("DownloadImg", "Ticket", new { id = item.Id },@item.FileName)" class="btn btn-success"><i class=" glyphicon glyphicon-download-alt"></i></a> |
                                                @* @Html.ActionLink("Delete", "DeleteTicketAttachment", new { id = item.Id })*@
                                                <a href="@Url.Action("DeleteTicketAttachment", "Ticket", new { id = item.Id })" class="btn btn-danger" onclick="return confirm('Are you sure? @item.FileName')"><i class=" glyphicon glyphicon-trash"></i></a>
                                            </li>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                        <div class="inputBox">
                            <button type="submit" value="Save" class="btnDiv">  Save </button>
                            @Html.ActionLink("Back", "Index", null, new { @class = "btnCla" })
                        </div>
                    </div>
                </div>
            }
            <div>
              @*  <div>
                    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
                </div>*@
                @* @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })*@
            </div>
        </div>
    </div>
</body>
</html>






@*
    @{
        ViewBag.Title = "Edit";
    }

    <h2>Edit</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>TicketViewModel</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AssignTo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.AssignTo, new SelectList(Model.DropdownAssignTo, "Id", "Name"),
                    "Select Employee", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AssignTo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.TypeId, new SelectList(Model.DropdownTypeId, "Id", "Name"),
                  "Select Type", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PriorityId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.PriorityId, new SelectList(Model.DropdownPriorityId, "Id", "Name"),
                  "Select Priority", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PriorityId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StatusId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.StatusId, new SelectList(Model.DropdownStatusId, "Id", "Name"),
                   "Select Status", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
*@