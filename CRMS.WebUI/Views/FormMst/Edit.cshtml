@model CRMS.Core.ViewModel.FormMstViewModel

<br/>
@if (@TempData["Already"] != null)
{<div class="alert alert-danger">
        <span class="glyphicon glyphicon-remove-circle"></span>
        @TempData["Already"]
    </div>}
<br/>
<html>
<head>
    <title>Form</title>
</head>
<body>
    <div class="section">
        <div class="container">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "errorMsg" })
                <div class="formDiv">
                    <div class="topTitleHead pb20">
                        <h2> Edit Form</h2>
                        <a class="backbtn" href="@Url.Action("Index", "FormMst")"><i class="glyphicon glyphicon-arrow-left"></i> Back To Index</a>
                    </div>
                    <div class="formSection">
                        <div class="inputBox">
                            <label>Name</label>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                        <div class="inputBox">
                            <label>Navigate URL</label>
                            @Html.EditorFor(model => model.NavigateURL, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NavigateURL, "", new { @class = "text-danger" })
                        </div>
                        <div class="inputBox selectBox">
                            <label>Parent Form</label>
                            @Html.DropDownListFor(model => model.ParentFormId, new SelectList(Model.Dropdown, "Id", "Name"),
         "Select Parent", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ParentFormId, "", new { @class = "errorMsg" })
                        </div>
                        <div class="inputBox">
                            <label>Form Access Code</label>
                            @Html.EditorFor(model => model.FormAccessCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FormAccessCode, "", new { @class = "text-danger" })
                        </div>
                        <div class="inputBox">
                            <label>Display Index</label>
                            @Html.EditorFor(model => model.DisplayIndex, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DisplayIndex, "", new { @class = "text-danger" })
                        </div>
                        <div class="inputBox">
                            <label>IsActive</label>
                            <label class="switch">
                                <input type="checkbox" id="toggle" name="IsActive" @(Model.IsActive ? "checked" : "")>

                                <span class="slider round"></span>
                            </label>

                            <label>IsMenu</label>
                            <label class="switch">
                                <input type="checkbox" id="toggle1" name="IsMenu" @(Model.IsMenu ? "checked" : "")>
                                <span class="slider round"></span>
                            </label>
                        </div>
                        <div class="btn col-lg-12">
                            <button type="submit" value="Save" class="btnDiv">Save</button>
                        </div>
                    </div>

                </div>
            }           
        </div>
    </div>
</body>
</html>
<script>

    var isChecked = false;
    isChecked = "@Model.IsActive";
    if (isChecked) {
    $('#toggle').val(true);
    $('#toggle').toggleClass('active');
    }
    else {
    $('#toggle').val(false);
    }

    var isChecked = false;
    isChecked = "@Model.IsMenu";
    if (isChecked) {
     $('#toggle1').val(true);
     $('#toggle1').toggleClass('active');
    }
    else {
    $('#toggle1').val(false);
    }
</script>