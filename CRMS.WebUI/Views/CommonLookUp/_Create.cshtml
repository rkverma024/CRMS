@model CRMS.Core.ViewModel.CommonLookUpViewModel
@{
    Layout = null;
}

<!-- Bootstrap CSS -->
@*<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">*@
@if (@TempData["Already"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert" id="create">
        <strong>Success !</strong>
        @TempData["Already"]
       @* <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>*@
    </div>
}
@*<div class="modal fade" id="addmodal" tabindex="-1" role="dialog" data-toggle="popover" aria-labelledby="commonLookupLabel" aria-hidden="true">*@
    <div class="modal-dialog" role="document">
        <div class="modal-content w-500">
            <div class="modal-header">
                <h3 class="modal-title" id="commonLookupLabel">Create CommonLookup</h3>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form name="Createform" id="myform">
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ConfigName, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ConfigName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ConfigName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ConfigKey, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ConfigKey, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ConfigKey, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ConfigValue, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ConfigValue, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ConfigValue, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.CheckBoxFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" onclick="closePopup()">Close</button>
                        <button type="submit" class="btn btn-success">Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
@*</div>*@


<script src='@Url.Content("~/Scripts/jquery.validate.js")' type='text/javascript'></script>
<script src='@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")' type='text/javascript'></script>
<script>
    function closePopup() {
        location.reload();
    }
    $('#myform').submit(function (e) {
        debugger;
        e.preventDefault();
        var $form = $(this);
        if (!$form.valid) return false;
        var ConfigName = $('#ConfigName').val();
        var ConfigKey = $('#ConfigKey').val();
        if (ConfigName != "" && (ConfigName == ConfigKey)) {
            alert("ConfigName and ConfigKey not be Same")
            return false;
        }
        $.ajax({
            url: '@Url.Action("Create","CommonLookUp")',
            type: "Post",
            data: $form.serialize(),
            success: function (data) {
                if (data == "true") {
                    location.reload();
                }
                else if (data == "Exists") {
                    alert("Data Already Exists");
                }
            }
        });
    });
</script>