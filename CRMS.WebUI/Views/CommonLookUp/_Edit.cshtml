@model CRMS.Core.ViewModel.CommonLookUpViewModel
@{
    Layout = null;
}

<div class="modal-dialog" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Edit</h3>
            @*<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>*@
        </div>
        <div class="modal-body">
            <form  id="Editform">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.Id, htmlAttributes: new { @Id = "Id" })
                <div class="form-group">
                    <div class="row">
                        @Html.LabelFor(model => model.ConfigName, htmlAttributes: new { @class = "control-label col-md-3" })

                        @Html.EditorFor(model => model.ConfigName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConfigName, "", new { @class = "text-danger" })

                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        @Html.LabelFor(model => model.ConfigKey, htmlAttributes: new { @class = "control-label col-md-3" })

                        @Html.EditorFor(model => model.ConfigKey, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConfigKey, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">

                        @Html.LabelFor(model => model.ConfigValue, htmlAttributes: new { @class = "control-label col-md-3" })

                        @Html.EditorFor(model => model.ConfigValue, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConfigValue, "", new { @class = "text-danger" })

                    </div>
                </div>
                <div class="form-group">
                    <div class="row">

                        @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-3" })

                        @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })

                    </div>
                </div>
                <div class="form-group">
                    <div class="row">

                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })

                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">

                        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-3" })

                        @Html.CheckBoxFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" onclick="closePopup()">Close</button>
                    <button type="submit" class="btn btn-success">Save</button>
                </div>
            </form>
        </div>

    </div>
</div>

<script src='@Url.Content("~/Scripts/jquery.validate.js")' type='text/javascript'></script>
<script src='@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")' type='text/javascript'></script>

<script>
    function closePopup() {
        location.reload();
    }
    $('#Editform').submit(function (e) {
        debugger;
        e.preventDefault();
        var $form = $(this);
        if (!$form.valid) return false;
        var ConfigName = $('#ConfigName').val();
        var ConfigKey = $('#ConfigKey').val();
        if (ConfigName != "" && (ConfigName == ConfigKey)) {
            alert("ConfigName and ConfigKey not be Same")
            return false;
        }
        $.ajax({
            url: '@Url.Action("Edit","CommonLookUp")',
            type: "Post",
            data:  $form.serialize(),
            success: function (data) {
                debugger;
                if (data == "true") {
                    location.reload();
                }
                else if (data == "exists") {
                    alert("Data Already Exists");
                }
            }
        });

       @* function SubmitForm(form) {
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $.ajax({
                    type: "POST",
                    url: form.action,
                    data: $(form).serialize(),
                });
            }
            return false;
        }*@
    });
</script>